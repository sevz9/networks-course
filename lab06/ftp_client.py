import ftplib
import os
import sys

class FTPClient:
    def __init__(self):
        self.ftp = None
        self.is_connected = False
    
    def connect(self, host, username, password, port=21):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.ftp = ftplib.FTP()
            self.ftp.connect(host, port)
            self.ftp.login(username, password)
            self.is_connected = True
            print(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}")
            print(self.ftp.getwelcome())
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def list_files(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        if not self.is_connected:
            print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        try:
            print("\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
            print("-" * 50)
            
            
            files = []
            
            def process_line(line):
                parts = line.split()
                if len(parts) < 9:
                    return
                
                file_type = "üìÅ" if line.startswith('d') else "üìÑ"
                file_name = " ".join(parts[8:])
                file_size = parts[4]
                file_date = " ".join(parts[5:8])
                
                files.append((file_type, file_name, file_size, file_date))
            
            self.ftp.retrlines('LIST', process_line)
            
            
            files.sort(key=lambda x: x[0] == "üìÑ")
            
            
            if not files:
                print("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            else:
                print(f"{'–¢–∏–ø':<4}{'–ò–º—è':<30}{'–†–∞–∑–º–µ—Ä':<10}{'–î–∞—Ç–∞':<20}")
                print("-" * 60)
                for file_type, file_name, file_size, file_date in files:
                    print(f"{file_type:<4}{file_name:<30}{file_size:<10}{file_date:<20}")
            
            print("-" * 50)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
    
    def upload_file(self, local_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if not self.is_connected:
            print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        if not os.path.exists(local_path):
            print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {local_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            
            filename = os.path.basename(local_path)
            filesize = os.path.getsize(local_path)
            
            print(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {filename} –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Ä–∞–∑–º–µ—Ä: {filesize} –±–∞–π—Ç)")
            
            
            uploaded = 0
            
            
            def upload_callback(data):
                nonlocal uploaded
                uploaded += len(data)
                percent = int(uploaded * 100 / filesize)
                sys.stdout.write(f"\r–ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}% [{uploaded}/{filesize} –±–∞–π—Ç]")
                sys.stdout.flush()
            
            
            with open(local_path, 'rb') as file:
                self.ftp.storbinary(f'STOR {filename}', file, 1024, upload_callback)
            
            print("\n–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            
        except Exception as e:
            print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    
    def download_file(self, remote_filename, local_path=None):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.is_connected:
            print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        
        if local_path is None:
            local_path = remote_filename
        
        try:
            
            file_list = []
            self.ftp.retrlines('NLST', file_list.append)
            
            if remote_filename not in file_list:
                print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {remote_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                return
            
            
            try:
                filesize = self.ftp.size(remote_filename)
            except:
                filesize = 0  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä
            
            print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {remote_filename} —Å —Å–µ—Ä–≤–µ—Ä–∞")
            
            
            downloaded = 0
            
            
            def download_callback(data):
                nonlocal downloaded
                downloaded += len(data)
                if filesize > 0:
                    percent = int(downloaded * 100 / filesize)
                    sys.stdout.write(f"\r–ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}% [{downloaded}/{filesize} –±–∞–π—Ç]")
                else:
                    sys.stdout.write(f"\r–ó–∞–≥—Ä—É–∂–µ–Ω–æ {downloaded} –±–∞–π—Ç")
                sys.stdout.flush()
                return data
            
            
            with open(local_path, 'wb') as file:
                def write_to_file(data):
                    file.write(data)
                    download_callback(data)
                
                self.ftp.retrbinary(f'RETR {remote_filename}', write_to_file)
            
            print(f"\n–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {local_path}")
            
        except Exception as e:
            print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç FTP —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.is_connected:
            try:
                self.ftp.quit()
                print("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç FTP —Å–µ—Ä–≤–µ—Ä–∞")
            except:
                self.ftp.close()
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å FTP —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ")
            finally:
                self.is_connected = False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    client = FTPClient()
    
    print("=" * 50)
    print("FTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å dlptest.com")
    print("=" * 50)
    
    
    host = "ftp.dlptest.com"
    username = "dlpuser"
    password = "rNrKYTX9g7z3RgJRmxWuGHbeu"
    
    
    if not client.connect(host, username, password):
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return
    
    while True:
        print("\n–ú–µ–Ω—é:")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
        print("3. –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞")
        print("4. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ")
        
        if choice == '1':
            client.list_files()
        
        elif choice == '2':
            local_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ")
            client.upload_file(local_path)
        
        elif choice == '3':
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
            files = []
            try:
                client.ftp.retrlines('NLST', files.append)
                if not files:
                    print("–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
                    continue
                    
                for i, filename in enumerate(files, 1):
                    print(f"{i}. {filename}")
                
                selection = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞: ")
                
                
                if selection.isdigit() and 1 <= int(selection) <= len(files):
                    remote_filename = files[int(selection) - 1]
                else:
                    remote_filename = selection
                
                local_path = input(f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—É—Å—Ç–æ–π –≤–≤–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∫ {remote_filename}): ")
                if not local_path:
                    local_path = remote_filename
                
                client.download_file(remote_filename, local_path)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}")
        
        elif choice == '4':
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            client.disconnect()
            break
        
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")

if __name__ == "__main__":
    main()
